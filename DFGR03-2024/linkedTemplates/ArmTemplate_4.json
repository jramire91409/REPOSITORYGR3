{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "DFGR03-2024"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DIM_F_SUB_CATEGORY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de la DIM_BRAND",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_F_SUPERSTORE_SALES_DATA",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "TDIMFCATEGORY"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_F_SUB_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "dimfsubcategory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_SUBCATEGORY",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate2"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "IDCATEGORY"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Order_ID as string,",
						"          Order_Date as string,",
						"          Ship_Date as string,",
						"          Ship_Mode as string,",
						"          Customer_ID as string,",
						"          Customer_Name as string,",
						"          Segment as string,",
						"          Country as string,",
						"          City as string,",
						"          State as string,",
						"          Postal_Code as integer,",
						"          Region as string,",
						"          Product_ID as string,",
						"          Category as string,",
						"          Sub_Category as string,",
						"          Product_Name as string,",
						"          Sales as decimal(38,10),",
						"          Quantity as integer,",
						"          Discount as decimal(38,10),",
						"          Profit as decimal(38,10)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ID_CATEGORY as integer,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TDIMFCATEGORY",
						"IDCATEGORY aggregate(groupBy(SUB_CATEGORY = upper(Sub_Category),",
						"          ID_CATEGORY,",
						"          DESCRIPTION),",
						"     COUNT = count()) ~> aggregate2",
						"aggregate2 alterRow(upsertIf(isNull(SUB_CATEGORY)==false())) ~> Modificarfila1",
						"source1, TDIMFCATEGORY join(upper(Category) == upper(DESCRIPTION),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IDCATEGORY",
						"Modificarfila1 split(isNull(ID_CATEGORY) == false(),",
						"     disjoint: false) ~> split1@(LLAVESLLENAS, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn1",
						"split1@LLAVESLLENAS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DESC_SUB_CATEGORY as string,",
						"          ID_SUBCATEGORY as integer,",
						"          ID_CATEGORY as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['DESC_SUB_CATEGORY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          DESC_SUB_CATEGORY = SUB_CATEGORY,",
						"          ID_CATEGORY",
						"     )) ~> dimfsubcategory",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DESC_SUB_CATEGORY as string,",
						"          ID_SUBCATEGORY as integer,",
						"          ID_CATEGORY as integer,",
						"          FECHA_CARGA as string,",
						"          DESC_CATEGORY_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          DESC_SUB_CATEGORY = SUB_CATEGORY,",
						"          ID_CATEGORY,",
						"          FECHA_CARGA,",
						"          DESC_CATEGORY_H = DESCRIPTION",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_E_PPTO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STAGE_E_DWH_PPTO",
								"type": "DatasetReference"
							},
							"name": "STAGEREALSALES"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_EVENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "DIMEVENTTYPE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_PPTO_ECOMM",
								"type": "DatasetReference"
							},
							"name": "FACTPPTOECOMM",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_PPTO_ECPOM",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "MONTHANDYEAR"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          fec_ppto_month as string,",
						"          event_type as string,",
						"          product_id as integer,",
						"          imp_precio as decimal(38,10)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STAGEREALSALES",
						"source(output(",
						"          ID_EVENT_TYPE as integer,",
						"          DESC_EVENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMEVENTTYPE",
						"aggregate1, DIMEVENTTYPE join(upper(event_type) == upper(DESC_EVENT_TYPE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"STAGEREALSALES derive(YEAR = left(fec_ppto_month,4),",
						"          MONTH = right(fec_ppto_month,2)) ~> MONTHANDYEAR",
						"MONTHANDYEAR aggregate(groupBy(YEAR,",
						"          MONTH,",
						"          product_id,",
						"          event_type),",
						"     IMPORTE_PRECIO = sum(imp_precio)) ~> aggregate1",
						"join1 split(isNull(ID_EVENT_TYPE) == false(),",
						"     disjoint: false) ~> split1@(LLAVESLLENAS, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn1",
						"split1@LLAVESLLENAS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MONTH as decimal(2,0),",
						"          YEAR as decimal(4,0),",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          MONTH,",
						"          YEAR,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = IMPORTE_PRECIO",
						"     )) ~> FACTPPTOECOMM",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MONTH as decimal(2,0),",
						"          YEAR as decimal(4,0),",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          FECHA_CARGA as string,",
						"          DESC_EVENT_TYPE_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          MONTH,",
						"          YEAR,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = IMPORTE_PRECIO,",
						"          FECHA_CARGA,",
						"          DESC_EVENT_TYPE_H = DESC_EVENT_TYPE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_E_SALES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STAGE_E_REAL_SALES",
								"type": "DatasetReference"
							},
							"name": "STAGEREALSALES"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_EVENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "DIMEVENTTYPE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_SALES_ECOMM",
								"type": "DatasetReference"
							},
							"name": "FACTSALESECOMM",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_SALES_ECOM",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_time as string,",
						"          event_type as string,",
						"          product_id as string,",
						"          category_id as string,",
						"          category_code as string,",
						"          brand as string,",
						"          price as decimal(38,10),",
						"          user_id as integer,",
						"          user_session as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STAGEREALSALES",
						"source(output(",
						"          ID_EVENT_TYPE as integer,",
						"          DESC_EVENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMEVENTTYPE",
						"aggregate1, DIMEVENTTYPE join(upper(event_type) == upper(DESC_EVENT_TYPE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"STAGEREALSALES derive(FECHA = left(event_time,10),",
						"          user_session_NULL = coalesce(user_session,\"NA\")) ~> derivedColumn1",
						"derivedColumn1 cast(output(",
						"          product_id as integer '000',",
						"          FECHA as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast1",
						"select1 aggregate(groupBy(event_type,",
						"          product_id,",
						"          user_session,",
						"          user_id,",
						"          FECHA),",
						"     price = sum(price)) ~> aggregate1",
						"cast1 select(mapColumn(",
						"          event_type,",
						"          product_id,",
						"          price,",
						"          user_id,",
						"          user_session = user_session_NULL,",
						"          FECHA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join1 split(isNull(ID_EVENT_TYPE) == false(),",
						"     disjoint: false) ~> split1@(LLAVESLLENAS, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn2",
						"split1@LLAVESLLENAS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_USER_SESION as string,",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          ID_USER as integer,",
						"          EVENT_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_USER_SESION = user_session,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = price,",
						"          ID_USER = user_id,",
						"          EVENT_DATE = FECHA",
						"     )) ~> FACTSALESECOMM",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_USER_SESION as string,",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          ID_USER as integer,",
						"          EVENT_DATE as date,",
						"          FECHA_CARGA as string,",
						"          DESC_EVENT_TYPE_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_USER_SESION = user_session,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = price,",
						"          ID_USER = user_id,",
						"          EVENT_DATE = FECHA,",
						"          FECHA_CARGA,",
						"          DESC_EVENT_TYPE_H = DESC_EVENT_TYPE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_F_PPTO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_F_PPTO_TIENDA_FISICA",
								"type": "DatasetReference"
							},
							"name": "STGPPTOTIENDAFISICA"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_SHIP_MODE",
								"type": "DatasetReference"
							},
							"name": "DIMFSHIPMODE"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_REGION",
								"type": "DatasetReference"
							},
							"name": "TDIMFREGION"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_PPTO_FISICA",
								"type": "DatasetReference"
							},
							"name": "FACTPPTOTIENDAFISICA",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_PPTO_FISICA",
								"type": "DatasetReference"
							},
							"name": "ERROR"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "cast1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "cast2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          fec_ppto_month as string,",
						"          Ship_Mode as string,",
						"          Region as string,",
						"          Product_ID as string,",
						"          imp_ppto_ganancia as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGPPTOTIENDAFISICA",
						"source(output(",
						"          ID_SHIP_MODE as integer,",
						"          DESC_SHIP_MODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMFSHIPMODE",
						"source(output(",
						"          ID_REGION as integer,",
						"          NAME_REGION as string,",
						"          DESC_MANAGER as string,",
						"          FEC_INI as date,",
						"          FEC_FIN as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TDIMFREGION",
						"cast2 derive(YEAR = left(fec_ppto_month,4),",
						"          MONTH = right(fec_ppto_month,2)) ~> derivedColumn1",
						"derivedColumn2 aggregate(groupBy(Product_ID,",
						"          Region = upper(Region),",
						"          Ship_Mode = upper(Ship_Mode),",
						"          YEAR,",
						"          MONTH,",
						"          FECHATOREGION),",
						"     IMPORTE_PPTO_GANANCIA = sum(imp_ppto_ganancia)) ~> aggregate1",
						"aggregate1, DIMFSHIPMODE join(Ship_Mode == DESC_SHIP_MODE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"cast1, TDIMFREGION join(FECHATOREGION >= FEC_INI && (FECHATOREGION <FEC_FIN || isNull(FEC_FIN)== true()) && Region == NAME_REGION,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"derivedColumn1 derive(FECHATOREGION = concat(YEAR,'-',MONTH,'-01')) ~> derivedColumn2",
						"join1 cast(output(",
						"          FECHATOREGION as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast1",
						"join2 split(isNull(ID_SHIP_MODE) == false() || isNull(ID_REGION)==false(),",
						"     disjoint: false) ~> split1@(LlavesLlenas, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn3",
						"STGPPTOTIENDAFISICA cast(output(",
						"          imp_ppto_ganancia as decimal(30,5) '###,###,000.###'",
						"     ),",
						"     errors: true) ~> cast2",
						"split1@LlavesLlenas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as string,",
						"          IMP_PPTO_GANANCIA as decimal(24,10),",
						"          ID_REGION as integer,",
						"          ID_SHIP_MODE as integer,",
						"          MONTH as string,",
						"          YEAR as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_PRODUCT = Product_ID,",
						"          IMP_PPTO_GANANCIA = IMPORTE_PPTO_GANANCIA,",
						"          ID_REGION,",
						"          ID_SHIP_MODE,",
						"          MONTH,",
						"          YEAR",
						"     )) ~> FACTPPTOTIENDAFISICA",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as string,",
						"          IMP_PPTO_GANANCIA as decimal(24,10),",
						"          ID_REGION as integer,",
						"          ID_SHIP_MODE as integer,",
						"          MONTH as string,",
						"          YEAR as string,",
						"          FECHA_CARGA as string,",
						"          DESC_SHIP_MODE_H as string,",
						"          DESC_REGION_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_PRODUCT = Product_ID,",
						"          IMP_PPTO_GANANCIA = IMPORTE_PPTO_GANANCIA,",
						"          ID_REGION,",
						"          ID_SHIP_MODE,",
						"          MONTH,",
						"          YEAR,",
						"          FECHA_CARGA,",
						"          DESC_SHIP_MODE_H = DESC_SHIP_MODE,",
						"          DESC_REGION_H = NAME_REGION",
						"     )) ~> ERROR"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_F_SALES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_F_SUPERSTORE_SALES_DATA",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "T_STG_F_SUPERSTORE_SALES_DATA_RETURNS",
								"type": "DatasetReference"
							},
							"name": "RETURNS"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_SHIP_MODE",
								"type": "DatasetReference"
							},
							"name": "DIMSHIPMODE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_SALES_FISICA",
								"type": "DatasetReference"
							},
							"name": "TFACTSALESFISICA",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_SALES_FISICA",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RETURNS1"
						},
						{
							"name": "join2"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "cast1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Order_ID as string,",
						"          Order_Date as string,",
						"          Ship_Date as string,",
						"          Ship_Mode as string,",
						"          Customer_ID as string,",
						"          Customer_Name as string,",
						"          Segment as string,",
						"          Country as string,",
						"          City as string,",
						"          State as string,",
						"          Postal_Code as integer,",
						"          Region as string,",
						"          Product_ID as string,",
						"          Category as string,",
						"          Sub_Category as string,",
						"          Product_Name as string,",
						"          Sales as decimal(38,10),",
						"          Quantity as integer,",
						"          Discount as decimal(38,10),",
						"          Profit as decimal(38,10)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          Returned as string,",
						"          Order_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> RETURNS",
						"source(output(",
						"          ID_SHIP_MODE as integer,",
						"          DESC_SHIP_MODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMSHIPMODE",
						"source1 select(mapColumn(",
						"          Order_ID,",
						"          Order_Date,",
						"          Ship_Date,",
						"          Ship_Mode,",
						"          Customer_ID,",
						"          Product_ID,",
						"          Importe = Sales,",
						"          Quantity,",
						"          Discount,",
						"          Profit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 filter(isNull(Order_ID)==false() && isNull(Quantity)==false() && Quantity >=1 && isNull(Product_ID)==false() && isNull(Customer_ID)==false() && filtrofecha == 1) ~> filter1",
						"select1 derive(filtrofecha = iif(Order_Date>Ship_Date,0,1),",
						"          Precio_Total = Importe*Quantity) ~> derivedColumn1",
						"filter1, RETURNS join(select1@Order_ID == RETURNS@Order_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> RETURNS1",
						"RETURNS1, DIMSHIPMODE join(upper(Ship_Mode) == upper(DESC_SHIP_MODE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"derivedColumn2 aggregate(groupBy(Order_ID = upper(select1@Order_ID),",
						"          Product_ID = upper(Product_ID),",
						"          Order_Date,",
						"          Ship_Date,",
						"          ID_SHIP_MODE,",
						"          Customer_ID = upper(Customer_ID),",
						"          Returned = upper(Returned),",
						"          ID_RETURNED,",
						"          Ship_Mode),",
						"     Importe = sum(Importe),",
						"          Quantity = sum(Quantity),",
						"          Discount = sum(Discount),",
						"          Profit = sum(Profit),",
						"          Precio_Total = sum(Precio_Total)) ~> aggregate1",
						"join2 derive(ID_RETURNED = iif(upper(Returned)=='YES',1,0)) ~> derivedColumn2",
						"aggregate1 cast(output(",
						"          Order_Date as date 'yyyy-MM-dd',",
						"          Ship_Date as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 split(isNull(ID_SHIP_MODE) == false(),",
						"     disjoint: false) ~> split1@(LLAVESOK, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn3",
						"split1@LLAVESOK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ORDER as string,",
						"          ID_PRODUCT as string,",
						"          ORDER_DATE as date,",
						"          SHIP_DATE as date,",
						"          ID_SHIP_MODE as integer,",
						"          ID_CUSTOMER as string,",
						"          IMPORTE as decimal(24,10),",
						"          QUANTITY as integer,",
						"          DISCOUNT as decimal(24,10),",
						"          PROFIT as decimal(24,10),",
						"          ID_RETURNED as integer,",
						"          PRECIO_TOTAL as decimal(24,10)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_ORDER = Order_ID,",
						"          ID_PRODUCT = Product_ID,",
						"          ORDER_DATE = Order_Date,",
						"          SHIP_DATE = Ship_Date,",
						"          ID_SHIP_MODE,",
						"          ID_CUSTOMER = Customer_ID,",
						"          IMPORTE = Importe,",
						"          QUANTITY = Quantity,",
						"          DISCOUNT = Discount,",
						"          PROFIT = Profit,",
						"          ID_RETURNED,",
						"          PRECIO_TOTAL = Precio_Total",
						"     )) ~> TFACTSALESFISICA",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ORDER as string,",
						"          ID_PRODUCT as string,",
						"          ORDER_DATE as date,",
						"          SHIP_DATE as date,",
						"          ID_SHIP_MODE as integer,",
						"          ID_CUSTOMER as string,",
						"          IMPORTE as decimal(24,10),",
						"          QUANTITY as integer,",
						"          DISCOUNT as decimal(24,10),",
						"          PROFIT as decimal(24,10),",
						"          ID_RETURNED as integer,",
						"          PRECIO_TOTAL as decimal(24,10),",
						"          FECHA_CARGA as string,",
						"          DESC_SHIP_MODE_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_ORDER = Order_ID,",
						"          ID_PRODUCT = Product_ID,",
						"          ORDER_DATE = Order_Date,",
						"          SHIP_DATE = Ship_Date,",
						"          ID_SHIP_MODE,",
						"          ID_CUSTOMER = Customer_ID,",
						"          IMPORTE = Importe,",
						"          QUANTITY = Quantity,",
						"          DISCOUNT = Discount,",
						"          PROFIT = Profit,",
						"          ID_RETURNED,",
						"          PRECIO_TOTAL = Precio_Total,",
						"          FECHA_CARGA,",
						"          DESC_SHIP_MODE_H = Ship_Mode",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_DIM_E_PRODUCT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_DIM_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "DATOSDEPRODUCTO"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_BEAUTY_CAT",
								"type": "DatasetReference"
							},
							"name": "DIMBEAUTYCAT"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_BRAND",
								"type": "DatasetReference"
							},
							"name": "DIMBRAND"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "DIMPRODUCTO",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_DIM_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "CONBEAUTY"
						},
						{
							"name": "join1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_PRODUCT as integer,",
						"          ID_CATEGORY as decimal(25,0),",
						"          DESCRIPTION as string,",
						"          ID_BEAUTY_CAT as integer,",
						"          ID_BRAND as integer,",
						"          FECHA_CARGA as string,",
						"          DESC_BEAUTYCAT_H as string,",
						"          DESC_BRAND_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DATOSDEPRODUCTO",
						"source(output(",
						"          ID_BEAUTY_CAT as integer,",
						"          DESC_BEAUTY_CAT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMBEAUTYCAT",
						"source(output(",
						"          ID_BRAND as integer,",
						"          DESC_BRAND as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMBRAND",
						"select1, DIMBEAUTYCAT join(upper(beauty_category) == upper(DESC_BEAUTY_CAT),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CONBEAUTY",
						"CONBEAUTY, DIMBRAND join(upper(brand) == upper(DESC_BRAND),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 cast(output(",
						"          category_id as long '000,000,000'",
						"     ),",
						"     errors: true) ~> cast2",
						"split1@llavesllenas alterRow(upsertIf(isNull(product_id)==false())) ~> Modificarfila1",
						"cast2 split(isNull(ID_BEAUTY_CAT) == false() || isNull(ID_BRAND) == false(),",
						"     disjoint: false) ~> split1@(llavesllenas, llavesnulas)",
						"split1@llavesnulas derive(FECHA_CARGA = currentDate()) ~> derivedColumn1",
						"Modificarfila1 aggregate(groupBy(product_id,",
						"          category_id,",
						"          product_desc,",
						"          ID_BEAUTY_CAT,",
						"          ID_BRAND),",
						"     count = count()) ~> aggregate1",
						"DATOSDEPRODUCTO select(mapColumn(",
						"          product_id = ID_PRODUCT,",
						"          category_id = ID_CATEGORY,",
						"          category_code = ID_CATEGORY,",
						"          beauty_category = DESC_BEAUTYCAT_H,",
						"          brand = DESC_BRAND_H,",
						"          product_desc = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as integer,",
						"          ID_CATEGORY as integer,",
						"          DESCRIPTION as string,",
						"          ID_BEAUTY_CAT as integer,",
						"          ID_BRAND as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_PRODUCT'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_PRODUCT = product_id,",
						"          ID_CATEGORY = category_id,",
						"          DESCRIPTION = product_desc,",
						"          ID_BEAUTY_CAT,",
						"          ID_BRAND",
						"     )) ~> DIMPRODUCTO",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as integer,",
						"          ID_CATEGORY as decimal(25,0),",
						"          DESCRIPTION as string,",
						"          ID_BEAUTY_CAT as integer,",
						"          ID_BRAND as integer,",
						"          FECHA_CARGA as string,",
						"          DESC_BEAUTYCAT_H as string,",
						"          DESC_BRAND_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_PRODUCT = product_id,",
						"          ID_CATEGORY = category_id,",
						"          DESCRIPTION = product_desc,",
						"          ID_BEAUTY_CAT,",
						"          ID_BRAND,",
						"          FECHA_CARGA,",
						"          DESC_BEAUTYCAT_H = beauty_category,",
						"          DESC_BRAND_H = brand",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_DIM_F_CITY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_CITY",
								"type": "DatasetReference"
							},
							"name": "STGDIMSALESDATS"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_REGION",
								"type": "DatasetReference"
							},
							"name": "DIMFREGION"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_F_CITY",
								"type": "DatasetReference"
							},
							"name": "dimfcity",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_CITY",
								"type": "DatasetReference"
							},
							"name": "huerfanos",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DESC_CITY as string,",
						"          DESC_STATE as string,",
						"          DESC_COUNTRY as string,",
						"          ID_POSTAL_CODE as integer,",
						"          ID_REGION as integer,",
						"          FECHA_CARGA as string,",
						"          DESC_REGION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGDIMSALESDATS",
						"source(output(",
						"          ID_REGION as integer,",
						"          NAME_REGION as string,",
						"          DESC_MANAGER as string,",
						"          FEC_INI as date,",
						"          FEC_FIN as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMFREGION",
						"derivedColumn1, DIMFREGION join(FECHATOREGION >= FEC_INI && (FECHATOREGION <FEC_FIN || isNull(FEC_FIN)== true()) && DESC_REGION == NAME_REGION,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"split1@llavesllenas alterRow(upsertIf(isNull(ID_POSTAL_CODE)==false())) ~> Modificarfila1",
						"STGDIMSALESDATS derive(FECHATOREGION = currentDate()) ~> derivedColumn1",
						"join1 split(isNull(DIMFREGION@ID_REGION) == false(),",
						"     disjoint: false) ~> split1@(llavesllenas, LLAVEREGIONNULL)",
						"split1@LLAVEREGIONNULL derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn2",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DESC_CITY as string,",
						"          DESC_STATE as string,",
						"          DESC_COUNTRY as string,",
						"          ID_POSTAL_CODE as integer,",
						"          ID_REGION as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_POSTAL_CODE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          DESC_CITY,",
						"          DESC_STATE,",
						"          DESC_COUNTRY,",
						"          ID_POSTAL_CODE,",
						"          ID_REGION = split1@llavesllenas@ID_REGION",
						"     )) ~> dimfcity",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DESC_CITY as string,",
						"          DESC_STATE as string,",
						"          DESC_COUNTRY as string,",
						"          ID_POSTAL_CODE as integer,",
						"          ID_REGION as integer,",
						"          FECHA_CARGA as string,",
						"          DESC_REGION as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          DESC_CITY,",
						"          DESC_STATE,",
						"          DESC_COUNTRY,",
						"          ID_POSTAL_CODE,",
						"          ID_REGION = split1@LLAVEREGIONNULL@ID_REGION,",
						"          DESC_REGION,",
						"          FECHA_CARGA",
						"     )) ~> huerfanos"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_DIM_F_CUSTOMER')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "SUPERSTORESALESDATA"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_SEGMENT",
								"type": "DatasetReference"
							},
							"name": "DIMFSEGMENT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_F_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "HUERFANOS",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CUSTOMER as string,",
						"          DESC_CUSTOMER as string,",
						"          ID_SEGMENT as integer,",
						"          ID_POSTAL_CODE as integer,",
						"          fecha_carga as string,",
						"          DESC_SEGMENT_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SUPERSTORESALESDATA",
						"source(output(",
						"          ID_SEGMENT as integer,",
						"          DESC_SEGMENT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMFSEGMENT",
						"SUPERSTORESALESDATA aggregate(groupBy(Customer_ID = ID_CUSTOMER,",
						"          Customer_Name = upper(DESC_CUSTOMER),",
						"          Segment = upper(DESC_SEGMENT_H),",
						"          Postal_Code = ID_POSTAL_CODE),",
						"     count = count()) ~> aggregate1",
						"aggregate1, DIMFSEGMENT join(Segment == DESC_SEGMENT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"split1@LLAVESLLENAS alterRow(upsertIf(isNull(Customer_ID)==false())) ~> Modificarfila1",
						"join1 split(isNull(ID_SEGMENT) == false(),",
						"     disjoint: false) ~> split1@(LLAVESLLENAS, LLAVESNULL)",
						"split1@LLAVESNULL derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CUSTOMER as string,",
						"          DESC_CUSTOMER as string,",
						"          ID_SEGMENT as integer,",
						"          ID_POSTAL_CODE as integer,",
						"          AGE as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['ID_CUSTOMER'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_CUSTOMER = Customer_ID,",
						"          DESC_CUSTOMER = Customer_Name,",
						"          ID_SEGMENT,",
						"          ID_POSTAL_CODE = Postal_Code",
						"     )) ~> sink1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CUSTOMER as string,",
						"          DESC_CUSTOMER as string,",
						"          ID_SEGMENT as integer,",
						"          ID_POSTAL_CODE as integer,",
						"          fecha_carga as string,",
						"          DESC_SEGMENT_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_CUSTOMER = Customer_ID,",
						"          DESC_CUSTOMER = Customer_Name,",
						"          ID_SEGMENT,",
						"          ID_POSTAL_CODE = Postal_Code,",
						"          fecha_carga = FECHA_CARGA,",
						"          DESC_SEGMENT_H = Segment",
						"     )) ~> HUERFANOS"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_DIM_F_PRODUCT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "SUPERSTORESALESDATA"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_SUB_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "DIMFSUBCATEGORIA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_F_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "DIMPRODUCTO",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "HERFANOS",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_PRODUCT as string,",
						"          ID_SUBCATEGORY as integer,",
						"          DESCRIPTION as string,",
						"          FECHA_CARGUE as string,",
						"          DESC_SUBCATEGORIA_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SUPERSTORESALESDATA",
						"source(output(",
						"          DESC_SUB_CATEGORY as string,",
						"          ID_SUBCATEGORY as integer,",
						"          ID_CATEGORY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMFSUBCATEGORIA",
						"select1, DIMFSUBCATEGORIA join(upper(Sub_Category) == upper(DESC_SUB_CATEGORY),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"aggregate1 alterRow(upsertIf(isNull(Product_ID)==false())) ~> Modificarfila1",
						"SUPERSTORESALESDATA select(mapColumn(",
						"          Product_ID = ID_PRODUCT,",
						"          Sub_Category = DESC_SUBCATEGORIA_H,",
						"          Product_Name = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@llavescompletas aggregate(groupBy(Product_ID,",
						"          ID_SUBCATEGORY),",
						"     COUNT = count(),",
						"          Product_Name_2 = max(Product_Name)) ~> aggregate1",
						"join1 split(isNull(ID_SUBCATEGORY) == false(),",
						"     disjoint: false) ~> split1@(llavescompletas, huerfanos)",
						"split1@huerfanos derive(FECHA_CARGUE = currentTimestamp()) ~> derivedColumn1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as string,",
						"          ID_SUBCATEGORY as integer,",
						"          DESCRIPTION as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['DESCRIPTION'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_PRODUCT = Product_ID,",
						"          ID_SUBCATEGORY,",
						"          DESCRIPTION = Product_Name_2",
						"     )) ~> DIMPRODUCTO",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as string,",
						"          ID_SUBCATEGORY as integer,",
						"          DESCRIPTION as string,",
						"          FECHA_CARGUE as string,",
						"          DESC_SUBCATEGORIA_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_PRODUCT = Product_ID,",
						"          ID_SUBCATEGORY,",
						"          DESCRIPTION = Product_Name,",
						"          FECHA_CARGUE,",
						"          DESC_SUBCATEGORIA_H = Sub_Category",
						"     )) ~> HERFANOS"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_DIM_F_SUB_CATEGORY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de la DIM_BRAND",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_SUBCATEGORY",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "TDIMFCATEGORY"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_F_SUB_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "dimfsubcategory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_DIM_F_SUBCATEGORY",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate2"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "IDCATEGORY"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DESC_SUB_CATEGORY as string,",
						"          ID_SUBCATEGORY as integer,",
						"          ID_CATEGORY as integer,",
						"          FECHA_CARGA as string,",
						"          DESC_CATEGORY_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ID_CATEGORY as integer,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TDIMFCATEGORY",
						"IDCATEGORY aggregate(groupBy(SUB_CATEGORY = upper(DESC_SUB_CATEGORY),",
						"          source1@ID_CATEGORY,",
						"          DESCRIPTION),",
						"     COUNT = count()) ~> aggregate2",
						"aggregate2 alterRow(upsertIf(isNull(SUB_CATEGORY)==false())) ~> Modificarfila1",
						"source1, TDIMFCATEGORY join(upper(DESC_CATEGORY_H) == upper(DESCRIPTION),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IDCATEGORY",
						"Modificarfila1 split(isNull(ID_CATEGORY) == false(),",
						"     disjoint: false) ~> split1@(LLAVESLLENAS, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn1",
						"split1@LLAVESLLENAS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DESC_SUB_CATEGORY as string,",
						"          ID_SUBCATEGORY as integer,",
						"          ID_CATEGORY as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['DESC_SUB_CATEGORY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          DESC_SUB_CATEGORY = SUB_CATEGORY,",
						"          ID_CATEGORY",
						"     )) ~> dimfsubcategory",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DESC_SUB_CATEGORY as string,",
						"          ID_SUBCATEGORY as integer,",
						"          ID_CATEGORY as integer,",
						"          FECHA_CARGA as string,",
						"          DESC_CATEGORY_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          DESC_SUB_CATEGORY = SUB_CATEGORY,",
						"          ID_CATEGORY,",
						"          FECHA_CARGA,",
						"          DESC_CATEGORY_H = DESCRIPTION",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_FACT_E_PPTO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_FACT_PPTO_ECPOM",
								"type": "DatasetReference"
							},
							"name": "STAGEREALSALES"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_EVENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "DIMEVENTTYPE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_PPTO_ECOMM",
								"type": "DatasetReference"
							},
							"name": "FACTPPTOECOMM",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_PPTO_ECPOM",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MONTH as decimal(2,0),",
						"          YEAR as decimal(4,0),",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          FECHA_CARGA as string,",
						"          DESC_EVENT_TYPE_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STAGEREALSALES",
						"source(output(",
						"          ID_EVENT_TYPE as integer,",
						"          DESC_EVENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMEVENTTYPE",
						"aggregate1, DIMEVENTTYPE join(upper(event_type) == upper(DESC_EVENT_TYPE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 aggregate(groupBy(YEAR,",
						"          MONTH,",
						"          product_id,",
						"          event_type),",
						"     IMPORTE_PRECIO = sum(imp_precio)) ~> aggregate1",
						"join1 split(isNull(ID_EVENT_TYPE) == false(),",
						"     disjoint: false) ~> split1@(LLAVESLLENAS, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn1",
						"STAGEREALSALES select(mapColumn(",
						"          MONTH,",
						"          YEAR,",
						"          event_type = DESC_EVENT_TYPE_H,",
						"          product_id = ID_PRODUCT,",
						"          imp_precio = PRICE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@LLAVESLLENAS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MONTH as decimal(2,0),",
						"          YEAR as decimal(4,0),",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          MONTH,",
						"          YEAR,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = IMPORTE_PRECIO",
						"     )) ~> FACTPPTOECOMM",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MONTH as decimal(2,0),",
						"          YEAR as decimal(4,0),",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          FECHA_CARGA as string,",
						"          DESC_EVENT_TYPE_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          MONTH,",
						"          YEAR,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = IMPORTE_PRECIO,",
						"          FECHA_CARGA,",
						"          DESC_EVENT_TYPE_H = DESC_EVENT_TYPE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_FACT_E_SALES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_FACT_SALES_ECOM",
								"type": "DatasetReference"
							},
							"name": "STAGEREALSALES"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_EVENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "DIMEVENTTYPE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_SALES_ECOMM",
								"type": "DatasetReference"
							},
							"name": "FACTSALESECOMM",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_SALES_ECOM",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_USER_SESION as string,",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          ID_USER as integer,",
						"          EVENT_DATE as date,",
						"          FECHA_CARGA as string,",
						"          DESC_EVENT_TYPE_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STAGEREALSALES",
						"source(output(",
						"          ID_EVENT_TYPE as integer,",
						"          DESC_EVENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMEVENTTYPE",
						"aggregate1, DIMEVENTTYPE join(upper(event_type) == upper(DESC_EVENT_TYPE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 aggregate(groupBy(event_type,",
						"          product_id,",
						"          user_session,",
						"          user_id,",
						"          FECHA),",
						"     price = sum(price)) ~> aggregate1",
						"STAGEREALSALES select(mapColumn(",
						"          event_type = DESC_EVENT_TYPE_H,",
						"          product_id = ID_PRODUCT,",
						"          price = PRICE,",
						"          user_id = ID_USER,",
						"          user_session = ID_USER_SESION,",
						"          FECHA = EVENT_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join1 split(isNull(ID_EVENT_TYPE) == false(),",
						"     disjoint: false) ~> split1@(LLAVESLLENAS, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn2",
						"split1@LLAVESLLENAS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_USER_SESION as string,",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          ID_USER as integer,",
						"          EVENT_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_USER_SESION = user_session,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = price,",
						"          ID_USER = user_id,",
						"          EVENT_DATE = FECHA",
						"     )) ~> FACTSALESECOMM",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_USER_SESION as string,",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          ID_USER as integer,",
						"          EVENT_DATE as date,",
						"          FECHA_CARGA as string,",
						"          DESC_EVENT_TYPE_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_USER_SESION = user_session,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = price,",
						"          ID_USER = user_id,",
						"          EVENT_DATE = FECHA,",
						"          FECHA_CARGA,",
						"          DESC_EVENT_TYPE_H = DESC_EVENT_TYPE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_FACT_F_PPTO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_FACT_PPTO_FISICA",
								"type": "DatasetReference"
							},
							"name": "STGPPTOTIENDAFISICA"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_SHIP_MODE",
								"type": "DatasetReference"
							},
							"name": "DIMFSHIPMODE"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_REGION",
								"type": "DatasetReference"
							},
							"name": "TDIMFREGION"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_PPTO_FISICA",
								"type": "DatasetReference"
							},
							"name": "FACTPPTOTIENDAFISICA",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_PPTO_FISICA",
								"type": "DatasetReference"
							},
							"name": "ERROR"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "cast1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_PRODUCT as string,",
						"          IMP_PPTO_GANANCIA as decimal(24,10),",
						"          ID_REGION as integer,",
						"          ID_SHIP_MODE as integer,",
						"          MONTH as string,",
						"          YEAR as string,",
						"          FECHA_CARGA as string,",
						"          DESC_SHIP_MODE_H as string,",
						"          DESC_REGION_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGPPTOTIENDAFISICA",
						"source(output(",
						"          ID_SHIP_MODE as integer,",
						"          DESC_SHIP_MODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMFSHIPMODE",
						"source(output(",
						"          ID_REGION as integer,",
						"          NAME_REGION as string,",
						"          DESC_MANAGER as string,",
						"          FEC_INI as date,",
						"          FEC_FIN as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TDIMFREGION",
						"derivedColumn2 aggregate(groupBy(Product_ID = ID_PRODUCT,",
						"          Region = upper(DESC_REGION_H),",
						"          Ship_Mode = upper(DESC_SHIP_MODE_H),",
						"          YEAR,",
						"          MONTH,",
						"          FECHATOREGION),",
						"     IMPORTE_PPTO_GANANCIA = sum(IMP_PPTO_GANANCIA)) ~> aggregate1",
						"aggregate1, DIMFSHIPMODE join(Ship_Mode == DESC_SHIP_MODE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"cast1, TDIMFREGION join(FECHATOREGION >= FEC_INI && (FECHATOREGION <FEC_FIN || isNull(FEC_FIN)== true()) && Region == NAME_REGION,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"STGPPTOTIENDAFISICA derive(FECHATOREGION = concat(YEAR,'-',MONTH,'-01')) ~> derivedColumn2",
						"join1 cast(output(",
						"          FECHATOREGION as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast1",
						"join2 split(isNull(ID_SHIP_MODE) == false() || isNull(ID_REGION)==false(),",
						"     disjoint: false) ~> split1@(LlavesLlenas, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn3",
						"split1@LlavesLlenas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as string,",
						"          IMP_PPTO_GANANCIA as decimal(24,10),",
						"          ID_REGION as integer,",
						"          ID_SHIP_MODE as integer,",
						"          MONTH as string,",
						"          YEAR as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_PRODUCT = Product_ID,",
						"          IMP_PPTO_GANANCIA = IMPORTE_PPTO_GANANCIA,",
						"          ID_REGION,",
						"          ID_SHIP_MODE,",
						"          MONTH,",
						"          YEAR",
						"     )) ~> FACTPPTOTIENDAFISICA",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as string,",
						"          IMP_PPTO_GANANCIA as decimal(24,10),",
						"          ID_REGION as integer,",
						"          ID_SHIP_MODE as integer,",
						"          MONTH as string,",
						"          YEAR as string,",
						"          FECHA_CARGA as string,",
						"          DESC_SHIP_MODE_H as string,",
						"          DESC_REGION_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_PRODUCT = Product_ID,",
						"          IMP_PPTO_GANANCIA = IMPORTE_PPTO_GANANCIA,",
						"          ID_REGION,",
						"          ID_SHIP_MODE,",
						"          MONTH,",
						"          YEAR,",
						"          FECHA_CARGA,",
						"          DESC_SHIP_MODE_H = DESC_SHIP_MODE,",
						"          DESC_REGION_H = NAME_REGION",
						"     )) ~> ERROR"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HUER_FACT_F_SALES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_ER_FACT_SALES_FISICA",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "T_STG_F_SUPERSTORE_SALES_DATA_RETURNS",
								"type": "DatasetReference"
							},
							"name": "RETURNS"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_SHIP_MODE",
								"type": "DatasetReference"
							},
							"name": "DIMSHIPMODE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_SALES_FISICA",
								"type": "DatasetReference"
							},
							"name": "TFACTSALESFISICA",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStoragegr3",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "T_ER_FACT_SALES_FISICA",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RETURNS1"
						},
						{
							"name": "join2"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "cast1"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_ORDER as string,",
						"          ID_PRODUCT as string,",
						"          ORDER_DATE as date,",
						"          SHIP_DATE as date,",
						"          ID_SHIP_MODE as integer,",
						"          ID_CUSTOMER as string,",
						"          IMPORTE as decimal(24,10),",
						"          QUANTITY as integer,",
						"          DISCOUNT as decimal(24,10),",
						"          PROFIT as decimal(24,10),",
						"          ID_RETURNED as integer,",
						"          PRECIO_TOTAL as decimal(24,10),",
						"          FECHA_CARGA as string,",
						"          DESC_SHIP_MODE_H as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          Returned as string,",
						"          Order_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> RETURNS",
						"source(output(",
						"          ID_SHIP_MODE as integer,",
						"          DESC_SHIP_MODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMSHIPMODE",
						"source1 select(mapColumn(",
						"          Order_ID = ID_ORDER,",
						"          Order_Date = ORDER_DATE,",
						"          Ship_Date = SHIP_DATE,",
						"          Ship_Mode = DESC_SHIP_MODE_H,",
						"          Customer_ID = ID_CUSTOMER,",
						"          Product_ID = ID_PRODUCT,",
						"          Importe = IMPORTE,",
						"          Quantity = QUANTITY,",
						"          Discount = DISCOUNT,",
						"          Profit = PROFIT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 filter(isNull(Order_ID)==false() && isNull(Quantity)==false() && Quantity >=1 && isNull(Product_ID)==false() && isNull(Customer_ID)==false() && filtrofecha == 1) ~> filter1",
						"select1 derive(filtrofecha = iif(Order_Date>Ship_Date,0,1),",
						"          Precio_Total = Importe*Quantity) ~> derivedColumn1",
						"filter1, RETURNS join(select1@Order_ID == RETURNS@Order_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> RETURNS1",
						"RETURNS1, DIMSHIPMODE join(upper(Ship_Mode) == upper(DESC_SHIP_MODE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"derivedColumn2 aggregate(groupBy(Order_ID = upper(select1@Order_ID),",
						"          Product_ID = upper(Product_ID),",
						"          Order_Date,",
						"          Ship_Date,",
						"          ID_SHIP_MODE,",
						"          Customer_ID = upper(Customer_ID),",
						"          Returned = upper(Returned),",
						"          ID_RETURNED,",
						"          Ship_Mode),",
						"     Importe = sum(Importe),",
						"          Quantity = sum(Quantity),",
						"          Discount = sum(Discount),",
						"          Profit = sum(Profit),",
						"          Precio_Total = sum(Precio_Total)) ~> aggregate1",
						"join2 derive(ID_RETURNED = iif(upper(Returned)=='YES',1,0)) ~> derivedColumn2",
						"aggregate1 cast(output(",
						"          Order_Date as date 'yyyy-MM-dd',",
						"          Ship_Date as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 split(isNull(ID_SHIP_MODE) == false(),",
						"     disjoint: false) ~> split1@(LLAVESOK, HUERFANOS)",
						"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn3",
						"split1@LLAVESOK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ORDER as string,",
						"          ID_PRODUCT as string,",
						"          ORDER_DATE as date,",
						"          SHIP_DATE as date,",
						"          ID_SHIP_MODE as integer,",
						"          ID_CUSTOMER as string,",
						"          IMPORTE as decimal(24,10),",
						"          QUANTITY as integer,",
						"          DISCOUNT as decimal(24,10),",
						"          PROFIT as decimal(24,10),",
						"          ID_RETURNED as integer,",
						"          PRECIO_TOTAL as decimal(24,10)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'contenedor-gr3',",
						"     assertFailure_folderPath: 'ERRORES',",
						"     mapColumn(",
						"          ID_ORDER = Order_ID,",
						"          ID_PRODUCT = Product_ID,",
						"          ORDER_DATE = Order_Date,",
						"          SHIP_DATE = Ship_Date,",
						"          ID_SHIP_MODE,",
						"          ID_CUSTOMER = Customer_ID,",
						"          IMPORTE = Importe,",
						"          QUANTITY = Quantity,",
						"          DISCOUNT = Discount,",
						"          PROFIT = Profit,",
						"          ID_RETURNED,",
						"          PRECIO_TOTAL = Precio_Total",
						"     )) ~> TFACTSALESFISICA",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ORDER as string,",
						"          ID_PRODUCT as string,",
						"          ORDER_DATE as date,",
						"          SHIP_DATE as date,",
						"          ID_SHIP_MODE as integer,",
						"          ID_CUSTOMER as string,",
						"          IMPORTE as decimal(24,10),",
						"          QUANTITY as integer,",
						"          DISCOUNT as decimal(24,10),",
						"          PROFIT as decimal(24,10),",
						"          ID_RETURNED as integer,",
						"          PRECIO_TOTAL as decimal(24,10),",
						"          FECHA_CARGA as string,",
						"          DESC_SHIP_MODE_H as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_ORDER = Order_ID,",
						"          ID_PRODUCT = Product_ID,",
						"          ORDER_DATE = Order_Date,",
						"          SHIP_DATE = Ship_Date,",
						"          ID_SHIP_MODE,",
						"          ID_CUSTOMER = Customer_ID,",
						"          IMPORTE = Importe,",
						"          QUANTITY = Quantity,",
						"          DISCOUNT = Discount,",
						"          PROFIT = Profit,",
						"          ID_RETURNED,",
						"          PRECIO_TOTAL = Precio_Total,",
						"          FECHA_CARGA,",
						"          DESC_SHIP_MODE_H = Ship_Mode",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GRD_LOAD_SATGE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CSVTOSTAGE_GRD",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TransactionID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ID_TRANSACTION",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ID_CUSTOMER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FEC_TRANSACTION_DATE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TransactionTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TIM_TRANSACTION_TIME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ProductCategory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PRODUCTCATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ProductSubcategory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PRODUCT_SUBCATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ProductDetail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PRODUCTDETAIL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TransactionValue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TRANSACTIONVAUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 24
										}
									},
									{
										"source": {
											"name": "PaymentMethod",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PAYMENTMETHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CustomerAge",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CUSTOMERAGE",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "xls_globalretaildynamics",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_Stage_GLOBALRETAILDYNAMICS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GRD_DIM_MEDIO_PAGO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_Stage_GLOBALRETAILDYNAMICS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference"
							},
							"name": "TGRDMEDOPAGO"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "Modificarfila1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_TRANSACTION as string,",
						"          ID_CUSTOMER as string,",
						"          FEC_TRANSACTION_DATE as string,",
						"          TIM_TRANSACTION_TIME as string,",
						"          PRODUCTCATEGORY as string,",
						"          PRODUCT_SUBCATEGORY as string,",
						"          PRODUCTDETAIL as string,",
						"          TRANSACTIONVAUE as decimal(24,10),",
						"          PAYMENTMETHOD as string,",
						"          CUSTOMERAGE as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"select1 cast(output(",
						"          PAYMENTMETHOD as string",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 aggregate(groupBy(PAYMENTMETHOD = upper(PAYMENTMETHOD)),",
						"     COUNT = count()) ~> aggregate1",
						"source1 select(mapColumn(",
						"          PAYMENTMETHOD",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 alterRow(upsertIf(isNull(PAYMENTMETHOD)== false())) ~> Modificarfila1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_MEDIO_PAGO as integer,",
						"          TXT_MEDIO_PAGO as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['TXT_MEDIO_PAGO'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          TXT_MEDIO_PAGO = PAYMENTMETHOD",
						"     )) ~> TGRDMEDOPAGO"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GRD_UPDATE_AGE_CUSTOMER')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_Stage_GLOBALRETAILDYNAMICS",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_F_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_F_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "Modificarfila1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_TRANSACTION as string,",
						"          ID_CUSTOMER as string,",
						"          FEC_TRANSACTION_DATE as string,",
						"          TIM_TRANSACTION_TIME as string,",
						"          PRODUCTCATEGORY as string,",
						"          PRODUCT_SUBCATEGORY as string,",
						"          PRODUCTDETAIL as string,",
						"          TRANSACTIONVAUE as decimal(24,10),",
						"          PAYMENTMETHOD as string,",
						"          CUSTOMERAGE as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ID_CUSTOMER as string,",
						"          DESC_CUSTOMER as string,",
						"          ID_SEGMENT as integer,",
						"          ID_POSTAL_CODE as integer,",
						"          AGE as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1 select(mapColumn(",
						"          ID_CUSTOMER,",
						"          CUSTOMERAGE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, source2 join(select1@ID_CUSTOMER == source2@ID_CUSTOMER,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 alterRow(updateIf(isNull(CUSTOMERAGE) == false())) ~> Modificarfila1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CUSTOMER as string,",
						"          DESC_CUSTOMER as string,",
						"          ID_SEGMENT as integer,",
						"          ID_POSTAL_CODE as integer,",
						"          AGE as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ID_CUSTOMER'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_CUSTOMER = select1@ID_CUSTOMER,",
						"          DESC_CUSTOMER,",
						"          ID_SEGMENT,",
						"          ID_POSTAL_CODE,",
						"          AGE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BACKUP_DIM_F_CUSTOMER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BACKUPDIMFCUSTOMER",
						"description": "TRUNCATE TABLE stage.BACKUP_DIM_F_CUSTOMER",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID_CUSTOMER",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ID_CUSTOMER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DESC_CUSTOMER",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DESC_CUSTOMER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ID_SEGMENT",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID_SEGMENT",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ID_POSTAL_CODE",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID_POSTAL_CODE",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "T_DIM_F_CUSTOMER",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "backup_dim_f_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DIMENSIONES_ECOMMERCE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de dimensiones ECOMM",
				"activities": [
					{
						"name": "DIM_BRAND",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_E_BRAND",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGDATOSPRODUCTO": {},
									"DIMBRAND": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_CATEGORY",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_BRAND",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_E_CATEGORY",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_BEAUTY_CAT",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_CATEGORY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_E_BEAUTY_CAT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_PRODUCTO",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_BEAUTY_CAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_E_PRODUCT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DATOSDEPRODUCTO": {},
									"DIMBEAUTYCAT": {},
									"DIMBRAND": {},
									"DIMPRODUCTO": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_EVENT_TYPE",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_PRODUCTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_E_EVENT_TYPE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGEDWHPPTO": {},
									"STAGEEREALSALES": {},
									"DIMEVENTTYPE": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DIMENSIONES_FISICA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DIM_F_CATEGORY",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_CATEGORY",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_SUB_CATEGORY",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_CATEGORY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_SUB_CATEGORY",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"TDIMFCATEGORY": {},
									"dimfsubcategory": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_PRODUCT",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_SUB_CATEGORY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_PRODUCT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SUPERSTORESALESDATA": {},
									"DIMFSUBCATEGORIA": {},
									"DIMPRODUCTO": {},
									"HERFANOS": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_SHIP_MODE",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_PRODUCT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_SHIP_MODE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGFSUPERSTORESALESDATA": {},
									"STGPPTOTIENDAFISCA": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_SEGMENT",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_SHIP_MODE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_SEGMENT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGFSUPERSTORESALESDATA": {},
									"DIMFSEGMENT": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_REGION",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_CUSTOMER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_REGION",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"superstoresalesdatapeople": {},
									"DIMFREGION1": {},
									"sink1": {},
									"UPDATEFECHAFIN": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_REGION_2STEP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_REGION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_REGION_2STEP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"superstoresalesdatapeople": {},
									"DIMFREGION1": {},
									"INSERT": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_CITY",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_REGION_2STEP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_CITY",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGDIMSALESDATS": {},
									"DIMFREGION": {},
									"dimfcity": {},
									"huerfanos": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_F_CUSTOMER",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_F_SEGMENT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_F_CUSTOMER",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SUPERSTORESALESDATA": {},
									"DIMFSEGMENT": {},
									"sink1": {},
									"HUERFANOS": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DIM_F_SUB_CATEGORY')]"
			]
		}
	]
}