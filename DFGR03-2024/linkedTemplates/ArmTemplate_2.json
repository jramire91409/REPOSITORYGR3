{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "DFGR03-2024"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LOAD_STAGE_PRODUCT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "STG_ECOM_DATIOS_DE_P_BRAND",
						"description": "Llenado de la stage de brand ecomm desde archivo excel",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE stage.Stage_ecom_DATOS_DE_PRODUCTO_brand",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BRAND",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Column1",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "XLS_DATOS_DE_PRODUCTO_BRAND",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_STG_E_DATOS_DE_P_BRAND",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "STG_ECOM_DATIOS_DE_P_BEAUTY_CAT",
						"description": "Llenado de la stage de BEAUTY CAT ecomm desde archivo excel",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "STG_ECOM_DATIOS_DE_P_BRAND",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table stage.Stage_ecom_DATOS_DE_PRODUCTO_beauty_cat",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BEAUTY_CAT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Beauty_cat",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "XLS_DATOS_DE_PRODUCTO_BEAUTY_CAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_STG_E_DATOS_DE_P_BEAUTY_CAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "STG_ECOM_DATIOS_DE_PRODUCTO",
						"description": "Llenado de la stage de DAGTOS DE PRODUCTO comm desde archivo excel",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "STG_ECOM_DATIOS_DE_P_BEAUTY_CAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE stage.Stage_ecom_DATOS_DE_PRODUCTO",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "product_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "category_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "category_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "COLUMNA1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Column3",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "category_code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "category_code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "beauty_category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "beauty_category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "brand",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "brand",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "product_desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_desc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "category_desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "category_desc",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "XLS_DATOS_DE_PRODUCTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_STG_E_DATOS_DE_PRODUCTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "STG_ECOM_DATOS_DE_P_CATEGORY",
						"description": "Llenado de la stage de CATEGORY ecomm desde archivo excel",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "STG_ECOM_DATIOS_DE_PRODUCTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE stage.Stage_ecom_DATOS_DE_PRODUCTO_category",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "category_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "category_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "category_code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "category_code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "category_desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "category_desc",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "XLS_DATOS_DE_PRODUCTO_CATEGORY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_STG_E_DATOS_DE_P_CATEGORY",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOAD_STAGE_SUPERSTORE_SALES_DATA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "XLS_SUPER_STORE_SALES_DATA",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE stage.Stage_Superstore_Sales_Data",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Order Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order_Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Ship Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ship_Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Ship Mode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ship_Mode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Customer ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Customer Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer_Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Segment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Segment",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Postal Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Postal_Code",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Product ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Sub-Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sub_Category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Product Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Sales",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Discount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Discount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "Profit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Profit",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "XLS_SUPER_STORE_SALES_DATA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_STG_F_SUPERSTORE_SALES_DATA",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "XLS_SUPER_STORE_SALES_DATA_PEOPLE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "XLS_SUPER_STORE_SALES_DATA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE stage.Stage_Superstore_Sales_Data_PEOPLE",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Person",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Person",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "XLS_SUPER_STORE_SALES_DATA_PEOPLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_STG_F__SUPERSTORE_SALES_DATA_PEOPLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "XLS_SUPER_STORE_SALES_DATA_RETURNS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "XLS_SUPER_STORE_SALES_DATA_PEOPLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE stage.Stage_Superstore_Sales_Data_RETURNS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Returned",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Returned",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Order ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "XLS_SUPER_STORE_SALES_DATA_RETURNS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "T_STG_F_SUPERSTORE_SALES_DATA_RETURNS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_BRAND')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de la DIM_BRAND",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_E_DATOS_DE_PRODUCTO",
								"type": "DatasetReference"
							},
							"name": "STGDATOSPRODUCTO"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_BRAND",
								"type": "DatasetReference"
							},
							"name": "DIMBRAND"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "Modificarfila1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_id as string,",
						"          category_id as string,",
						"          Column3 as string,",
						"          category_code as string,",
						"          beauty_category as string,",
						"          brand as string,",
						"          product_desc as string,",
						"          category_desc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGDATOSPRODUCTO",
						"STGDATOSPRODUCTO aggregate(groupBy(brand),",
						"     COUNT = count()) ~> aggregate1",
						"aggregate1 alterRow(upsertIf(isNull(brand)==false())) ~> Modificarfila1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_BRAND as integer,",
						"          DESC_BRAND as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['DESC_BRAND'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          DESC_BRAND = brand",
						"     )) ~> DIMBRAND"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_CATEGORY_long')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de la DIM_BRAND",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_E_DATOS_DE_PRODUCTO",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "DIMCATEGORY"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate2"
						},
						{
							"name": "Siexiste"
						},
						{
							"name": "Noexiste"
						},
						{
							"name": "UPSERTACTIONUP"
						},
						{
							"name": "UPSERTACTIONIN"
						},
						{
							"name": "union1"
						},
						{
							"name": "Modificarfila1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_id as string,",
						"          category_id as string,",
						"          Column3 as string,",
						"          category_code as string,",
						"          beauty_category as string,",
						"          brand as string,",
						"          product_desc as string,",
						"          category_desc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ID_CATEGORY as decimal(25,0),",
						"          DESCRIPTION as string,",
						"          CATEGORY_CODE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMCATEGORY",
						"source1 aggregate(groupBy(category_id),",
						"     COUNT = count()) ~> aggregate2",
						"aggregate2, DIMCATEGORY exists(ID_CATEGORY == toInteger(category_id),",
						"     negate:false,",
						"     broadcast: 'auto')~> Siexiste",
						"aggregate2, DIMCATEGORY exists(ID_CATEGORY == toInteger(category_id),",
						"     negate:true,",
						"     broadcast: 'auto')~> Noexiste",
						"Siexiste derive(UPSERT_ACTION = 'UP') ~> UPSERTACTIONUP",
						"Noexiste derive(UPSERT_ACTION = 'IN') ~> UPSERTACTIONIN",
						"UPSERTACTIONUP, UPSERTACTIONIN union(byName: true)~> union1",
						"union1 alterRow(upsertIf(isNull(UPSERT_ACTION)==false())) ~> Modificarfila1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CATEGORY as decimal(25,0),",
						"          DESCRIPTION as string,",
						"          CATEGORY_CODE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['category_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_CATEGORY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de la DIM_BRAND",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_E_DATOS_DE_PRODUCTO",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate2"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_id as string,",
						"          category_id as string,",
						"          Column3 as string,",
						"          category_code as string,",
						"          beauty_category as string,",
						"          brand as string,",
						"          product_desc as string,",
						"          category_desc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(category_id,",
						"          category_code,",
						"          category_desc),",
						"     COUNT = count()) ~> aggregate2",
						"cast1 alterRow(upsertIf(isNull(category_id)==false())) ~> Modificarfila1",
						"aggregate2 cast(output(",
						"          category_id as long '000,000,000'",
						"     ),",
						"     errors: true) ~> cast1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CATEGORY as decimal(25,0),",
						"          DESCRIPTION as string,",
						"          CATEGORY_CODE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CATEGORY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_CATEGORY = category_id,",
						"          DESCRIPTION = category_desc,",
						"          CATEGORY_CODE = category_code",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_BEAUTY_CAT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de la DIM_BRAND",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_E_DATOS_DE_PRODUCTO",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_BEAUTY_CAT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate2"
						},
						{
							"name": "Modificarfila1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_id as string,",
						"          category_id as string,",
						"          Column3 as string,",
						"          category_code as string,",
						"          beauty_category as string,",
						"          brand as string,",
						"          product_desc as string,",
						"          category_desc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(beauty_category = upper(beauty_category)),",
						"     COUNT = count()) ~> aggregate2",
						"aggregate2 alterRow(upsertIf(isNull(beauty_category) == false())) ~> Modificarfila1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_BEAUTY_CAT as integer,",
						"          DESC_BEAUTY_CAT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['DESC_BEAUTY_CAT'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          DESC_BEAUTY_CAT = beauty_category",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_PRODUCTO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STG_E_DATOS_DE_PRODUCTO",
								"type": "DatasetReference"
							},
							"name": "DATOSDEPRODUCTO"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_BEAUTY_CAT",
								"type": "DatasetReference"
							},
							"name": "DIMBEAUTYCAT"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_BRAND",
								"type": "DatasetReference"
							},
							"name": "DIMBRAND"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "DIMPRODUCTO"
						}
					],
					"transformations": [
						{
							"name": "CONBEAUTY"
						},
						{
							"name": "join1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "Modificarfila1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_id as string,",
						"          category_id as string,",
						"          Column3 as string,",
						"          category_code as string,",
						"          beauty_category as string,",
						"          brand as string,",
						"          product_desc as string,",
						"          category_desc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DATOSDEPRODUCTO",
						"source(output(",
						"          ID_BEAUTY_CAT as integer,",
						"          DESC_BEAUTY_CAT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMBEAUTYCAT",
						"source(output(",
						"          ID_BRAND as integer,",
						"          DESC_BRAND as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMBRAND",
						"DATOSDEPRODUCTO, DIMBEAUTYCAT join(upper(beauty_category) == upper(DESC_BEAUTY_CAT),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CONBEAUTY",
						"CONBEAUTY, DIMBRAND join(upper(brand) == upper(DESC_BRAND),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 cast(output(",
						"          category_id as long '000,000,000'",
						"     ),",
						"     errors: true) ~> cast2",
						"cast2 alterRow(upsertIf(isNull( product_id) == false())) ~> Modificarfila1",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PRODUCT as integer,",
						"          ID_CATEGORY as integer,",
						"          DESCRIPTION as string,",
						"          ID_BEAUTY_CAT as integer,",
						"          ID_BRAND as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_PRODUCT'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_PRODUCT = product_id,",
						"          ID_CATEGORY = category_id,",
						"          DESCRIPTION = product_desc,",
						"          ID_BEAUTY_CAT,",
						"          ID_BRAND",
						"     )) ~> DIMPRODUCTO"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_EVENT_TYPE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de la DIM_BRAND",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STAGE_E_DWH_PPTO",
								"type": "DatasetReference"
							},
							"name": "STGEDWHPPTO"
						},
						{
							"dataset": {
								"referenceName": "T_STAGE_E_REAL_SALES",
								"type": "DatasetReference"
							},
							"name": "STAGEEREALSALES"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_DIM_EVENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "DIMEVENTTYPE"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "Modificarfila1"
						},
						{
							"name": "union1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          fec_ppto_month as string,",
						"          event_type as string,",
						"          product_id as integer,",
						"          imp_precio as decimal(38,10)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGEDWHPPTO",
						"source(output(",
						"          event_time as string,",
						"          event_type as string,",
						"          product_id as string,",
						"          category_id as string,",
						"          category_code as string,",
						"          brand as string,",
						"          price as decimal(38,10),",
						"          user_id as integer,",
						"          user_session as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STAGEEREALSALES",
						"union1 aggregate(groupBy(event_type = upper(event_type)),",
						"     COUNT = count()) ~> aggregate1",
						"aggregate1 alterRow(upsertIf(isNull(event_type)==false())) ~> Modificarfila1",
						"select2, select1 union(byName: true)~> union1",
						"STGEDWHPPTO select(mapColumn(",
						"          event_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"STAGEEREALSALES select(mapColumn(",
						"          event_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Modificarfila1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_EVENT_TYPE as integer,",
						"          DESC_EVENT_TYPE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['DESC_EVENT_TYPE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          DESC_EVENT_TYPE = event_type",
						"     )) ~> DIMEVENTTYPE"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_SALES_ECOMM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STAGE_E_REAL_SALES",
								"type": "DatasetReference"
							},
							"name": "STAGEREALSALES"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_EVENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "DIMEVENTTYPE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_SALES_ECOMM",
								"type": "DatasetReference"
							},
							"name": "FACTSALESECOMM"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_time as string,",
						"          event_type as string,",
						"          product_id as string,",
						"          category_id as string,",
						"          category_code as string,",
						"          brand as string,",
						"          price as decimal(38,10),",
						"          user_id as integer,",
						"          user_session as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STAGEREALSALES",
						"source(output(",
						"          ID_EVENT_TYPE as integer,",
						"          DESC_EVENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMEVENTTYPE",
						"STAGEREALSALES, DIMEVENTTYPE join(upper(event_type) == upper(DESC_EVENT_TYPE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ROW as integer,",
						"          ID_USER_SESION as string,",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10),",
						"          ID_USER as integer,",
						"          EVENT_TIME as binary",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID_USER_SESION = user_session,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = price,",
						"          ID_USER = user_id,",
						"          EVENT_TIME = event_time",
						"     )) ~> FACTSALESECOMM"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_PPTO_ECOMM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "T_STAGE_E_DWH_PPTO",
								"type": "DatasetReference"
							},
							"name": "STAGEREALSALES"
						},
						{
							"dataset": {
								"referenceName": "T_DIM_EVENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "DIMEVENTTYPE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "T_FACT_PPTO_ECOMM",
								"type": "DatasetReference"
							},
							"name": "FACTPPTOECOMM"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "MONTHANDYEAR"
						}
					],
					"scriptLines": [
						"source(output(",
						"          fec_ppto_month as string,",
						"          event_type as string,",
						"          product_id as integer,",
						"          imp_precio as decimal(38,10)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STAGEREALSALES",
						"source(output(",
						"          ID_EVENT_TYPE as integer,",
						"          DESC_EVENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DIMEVENTTYPE",
						"MONTHANDYEAR, DIMEVENTTYPE join(upper(event_type) == upper(DESC_EVENT_TYPE),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"STAGEREALSALES derive(YEAR = left(fec_ppto_month,4),",
						"          MONTH = right(fec_ppto_month,2)) ~> MONTHANDYEAR",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MONTH as decimal(2,0),",
						"          YEAR as decimal(4,0),",
						"          ID_PRODUCT as integer,",
						"          ID_EVENT_TYPE as integer,",
						"          PRICE as decimal(24,10)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          MONTH,",
						"          YEAR,",
						"          ID_PRODUCT = product_id,",
						"          ID_EVENT_TYPE,",
						"          PRICE = imp_precio",
						"     )) ~> FACTPPTOECOMM"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECOMM_1_DIMENSION_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga de dimensiones ECOMM",
				"activities": [
					{
						"name": "DIM_BRAND",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_BRAND",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGDATOSPRODUCTO": {},
									"DIMBRAND": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_CATEGORY",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DIM_BRAND",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_CATEGORY",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_BEAUTY_CAT",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DIM_CATEGORY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_BEAUTY_CAT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_PRODUCTO",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DIM_BEAUTY_CAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_PRODUCTO",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DATOSDEPRODUCTO": {},
									"DIMBEAUTYCAT": {},
									"DIMBRAND": {},
									"DIMPRODUCTO": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM_EVENT_TYPE",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM_PRODUCTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_EVENT_TYPE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGEDWHPPTO": {},
									"STAGEEREALSALES": {},
									"DIMEVENTTYPE": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DIM_BRAND')]",
				"[concat(variables('factoryId'), '/dataflows/DIM_CATEGORY')]",
				"[concat(variables('factoryId'), '/dataflows/DIM_BEAUTY_CAT')]",
				"[concat(variables('factoryId'), '/dataflows/DIM_PRODUCTO')]",
				"[concat(variables('factoryId'), '/dataflows/DIM_EVENT_TYPE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOAD_FULL_STAGE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LOAD_STAGE_PRODUCT",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LOAD_STAGE_PRODUCT",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LOAD_STAGE_SUPERSTORE_SALES_DATA",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LOAD_STAGE_PRODUCT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LOAD_STAGE_SUPERSTORE_SALES_DATA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LOAD_STAGE_PPTO_TIENDA_FISICA",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LOAD_STAGE_SUPERSTORE_SALES_DATA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LOAD_STAGE_PPTO_TIENDA_FISICA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LOAD_STAGE_ECOMM_PPTO",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LOAD_STAGE_PPTO_TIENDA_FISICA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LOAD_STAGE_ECOMM_PPTO",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LOAD_STAGE_ECOM_REAL",
						"description": "CARGA DE TODOS LOS STAGE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LOAD_STAGE_ECOMM_PPTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LOAD_STAGE_ECOM_REAL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/LOAD_STAGE_PRODUCT')]",
				"[concat(variables('factoryId'), '/pipelines/LOAD_STAGE_SUPERSTORE_SALES_DATA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECOMM_2_FACT_TABLES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FACT_SALES_ECOMM",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FACT_SALES_ECOMM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STAGEREALSALES": {},
									"DIMEVENTTYPE": {},
									"FACTSALESECOMM": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FACT_PPTO_ECOMM",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FACT_SALES_ECOMM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FACT_PPTO_ECOMM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STAGEREALSALES": {},
									"DIMEVENTTYPE": {},
									"FACTPPTOECOMM": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FACT_SALES_ECOMM')]",
				"[concat(variables('factoryId'), '/dataflows/FACT_PPTO_ECOMM')]"
			]
		}
	]
}