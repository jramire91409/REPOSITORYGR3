{
	"name": "HUER_DIM_F_CUSTOMER",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "T_ER_DIM_F_CUSTOMER",
						"type": "DatasetReference"
					},
					"name": "SUPERSTORESALESDATA"
				},
				{
					"dataset": {
						"referenceName": "T_DIM_F_SEGMENT",
						"type": "DatasetReference"
					},
					"name": "DIMFSEGMENT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "T_DIM_F_CUSTOMER",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStoragegr3",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "T_ER_DIM_F_CUSTOMER",
						"type": "DatasetReference"
					},
					"name": "HUERFANOS",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStoragegr3",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "Modificarfila1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID_CUSTOMER as string,",
				"          DESC_CUSTOMER as string,",
				"          ID_SEGMENT as integer,",
				"          ID_POSTAL_CODE as integer,",
				"          fecha_carga as string,",
				"          DESC_SEGMENT_H as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SUPERSTORESALESDATA",
				"source(output(",
				"          ID_SEGMENT as integer,",
				"          DESC_SEGMENT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DIMFSEGMENT",
				"SUPERSTORESALESDATA aggregate(groupBy(Customer_ID = ID_CUSTOMER,",
				"          Customer_Name = upper(DESC_CUSTOMER),",
				"          Segment = upper(DESC_SEGMENT_H),",
				"          Postal_Code = ID_POSTAL_CODE),",
				"     count = count()) ~> aggregate1",
				"aggregate1, DIMFSEGMENT join(Segment == DESC_SEGMENT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"split1@LLAVESLLENAS alterRow(upsertIf(isNull(Customer_ID)==false())) ~> Modificarfila1",
				"join1 split(isNull(ID_SEGMENT) == false(),",
				"     disjoint: false) ~> split1@(LLAVESLLENAS, LLAVESNULL)",
				"split1@LLAVESNULL derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn1",
				"Modificarfila1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID_CUSTOMER as string,",
				"          DESC_CUSTOMER as string,",
				"          ID_SEGMENT as integer,",
				"          ID_POSTAL_CODE as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:true,",
				"     keys:['ID_CUSTOMER'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'contenedor-gr3',",
				"     assertFailure_folderPath: 'ERRORES',",
				"     mapColumn(",
				"          ID_CUSTOMER = Customer_ID,",
				"          DESC_CUSTOMER = Customer_Name,",
				"          ID_SEGMENT,",
				"          ID_POSTAL_CODE = Postal_Code",
				"     )) ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID_CUSTOMER as string,",
				"          DESC_CUSTOMER as string,",
				"          ID_SEGMENT as integer,",
				"          ID_POSTAL_CODE as integer,",
				"          fecha_carga as string,",
				"          DESC_SEGMENT_H as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'contenedor-gr3',",
				"     assertFailure_folderPath: 'ERRORES',",
				"     mapColumn(",
				"          ID_CUSTOMER = Customer_ID,",
				"          DESC_CUSTOMER = Customer_Name,",
				"          ID_SEGMENT,",
				"          ID_POSTAL_CODE = Postal_Code,",
				"          fecha_carga = FECHA_CARGA,",
				"          DESC_SEGMENT_H = Segment",
				"     )) ~> HUERFANOS"
			]
		}
	}
}