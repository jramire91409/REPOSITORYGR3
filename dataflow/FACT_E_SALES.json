{
	"name": "FACT_E_SALES",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "T_STAGE_E_REAL_SALES",
						"type": "DatasetReference"
					},
					"name": "STAGEREALSALES"
				},
				{
					"dataset": {
						"referenceName": "T_DIM_EVENT_TYPE",
						"type": "DatasetReference"
					},
					"name": "DIMEVENTTYPE"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "T_FACT_SALES_ECOMM",
						"type": "DatasetReference"
					},
					"name": "FACTSALESECOMM",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStoragegr3",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "T_ER_FACT_SALES_ECOM",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStoragegr3",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          event_time as string,",
				"          event_type as string,",
				"          product_id as string,",
				"          category_id as string,",
				"          category_code as string,",
				"          brand as string,",
				"          price as decimal(38,10),",
				"          user_id as integer,",
				"          user_session as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> STAGEREALSALES",
				"source(output(",
				"          ID_EVENT_TYPE as integer,",
				"          DESC_EVENT_TYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DIMEVENTTYPE",
				"aggregate1, DIMEVENTTYPE join(upper(event_type) == upper(DESC_EVENT_TYPE),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"STAGEREALSALES derive(FECHA = left(event_time,10),",
				"          user_session_NULL = coalesce(user_session,\"NA\")) ~> derivedColumn1",
				"derivedColumn1 cast(output(",
				"          product_id as integer '000',",
				"          FECHA as date 'yyyy-MM-dd'",
				"     ),",
				"     errors: true) ~> cast1",
				"select1 aggregate(groupBy(event_type,",
				"          product_id,",
				"          user_session,",
				"          user_id,",
				"          FECHA),",
				"     price = sum(price)) ~> aggregate1",
				"cast1 select(mapColumn(",
				"          event_type,",
				"          product_id,",
				"          price,",
				"          user_id,",
				"          user_session = user_session_NULL,",
				"          FECHA",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join1 split(isNull(ID_EVENT_TYPE) == false(),",
				"     disjoint: false) ~> split1@(LLAVESLLENAS, HUERFANOS)",
				"split1@HUERFANOS derive(FECHA_CARGA = currentTimestamp()) ~> derivedColumn2",
				"split1@LLAVESLLENAS sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID_USER_SESION as string,",
				"          ID_PRODUCT as integer,",
				"          ID_EVENT_TYPE as integer,",
				"          PRICE as decimal(24,10),",
				"          ID_USER as integer,",
				"          EVENT_DATE as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'contenedor-gr3',",
				"     assertFailure_folderPath: 'ERRORES',",
				"     mapColumn(",
				"          ID_USER_SESION = user_session,",
				"          ID_PRODUCT = product_id,",
				"          ID_EVENT_TYPE,",
				"          PRICE = price,",
				"          ID_USER = user_id,",
				"          EVENT_DATE = FECHA",
				"     )) ~> FACTSALESECOMM",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID_USER_SESION as string,",
				"          ID_PRODUCT as integer,",
				"          ID_EVENT_TYPE as integer,",
				"          PRICE as decimal(24,10),",
				"          ID_USER as integer,",
				"          EVENT_DATE as date,",
				"          FECHA_CARGA as string,",
				"          DESC_EVENT_TYPE_H as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'contenedor-gr3',",
				"     assertFailure_folderPath: 'ERRORES',",
				"     mapColumn(",
				"          ID_USER_SESION = user_session,",
				"          ID_PRODUCT = product_id,",
				"          ID_EVENT_TYPE,",
				"          PRICE = price,",
				"          ID_USER = user_id,",
				"          EVENT_DATE = FECHA,",
				"          FECHA_CARGA,",
				"          DESC_EVENT_TYPE_H = DESC_EVENT_TYPE",
				"     )) ~> sink1"
			]
		}
	}
}